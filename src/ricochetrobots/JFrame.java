package ricochetrobots;

import java.awt.Color;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Random;
import java.util.Set;
import static ricochetrobots.RicochetStateSettings.*;
import ricochetrobots.generation.BoardFactory;
import ricochetrobots.generation.DefaultQuadrants;

/**
 *
 * @author Philipp
 */
public class JFrame extends javax.swing.JFrame {

    private final String[] botTexts = new String[]{"red", "blue", "yellow", "green", "silver"};
    private final String[] directionTexts = new String[NUM_DIRECTIONS];
    private final Color[] colors = new Color[]{Color.RED, Color.BLUE, Color.YELLOW, Color.GREEN, Color.GRAY};

    {
        directionTexts[UP] = "up";
        directionTexts[LEFT] = "left";
        directionTexts[DOWN] = "down";
        directionTexts[RIGHT] = "right";
    }

    /**
     * Creates new form JFrame
     */
    public JFrame() {
        initComponents();
        RicochetStateSettings settings = new RicochetStateSettings(5, 16);
        RicochetState state = new BitmaskRicochetState(settings);

        long seed = System.currentTimeMillis();
        System.out.println("used seed: " + seed);
        Random rng = new Random(seed);
        Set<Integer> occupied = new HashSet<>();
        occupied.add(settings.square(7, 7));
        occupied.add(settings.square(7, 8));
        occupied.add(settings.square(8, 7));
        occupied.add(settings.square(8, 8));
        
        int targetBot = rng.nextInt(settings.getBotCount());
        
        int targetSquare = randomSquare(rng, settings.getSize() * settings.getSize(), occupied);
        occupied.add(targetSquare);
        
        new BoardFactory().populate(state, Arrays.asList(
                DefaultQuadrants.QUADRANTS[0].build(),
                DefaultQuadrants.QUADRANTS[1].build(),
                DefaultQuadrants.QUADRANTS[2].build(),
                DefaultQuadrants.QUADRANTS[3].build()
        ));
        for (int bot = 0; bot < settings.getBotCount(); bot++) {
            int square = randomSquare(rng, settings.getSize() * settings.getSize(), occupied);
            occupied.add(square);
            state.addBot(bot, square);
        }

        new Thread(() -> {
            RicochetSolver solver = new RicochetSolver(state, new TranspositionTable(18));
            List<RicochetMove> solve = solver.solve(targetBot, targetSquare);
            for (RicochetMove move : solve) {
                System.out.println(botTexts[move.getBot()] + directionTexts[move.getDirection()]);
            }
        }).start();

        BoardPanel panel = new BoardPanel(state, colors);
        panel.target = targetSquare;
        panel.targetColor = colors[targetBot];
        panel.setSize(500, 500);
        add(panel);
        panel.invalidate();
    }
    
    private int randomSquare(Random rng, int max, Set<Integer> occupied) {
        int result;
        do {
            result = rng.nextInt(max);
        } while(occupied.contains(result));
        return result;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(600, 600));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new JFrame().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
